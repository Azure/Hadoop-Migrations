{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.3.255.40792",
      "templateHash": "9518166994834214731"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location to create all resources"
      }
    },
    "projectName": {
      "type": "string",
      "defaultValue": "hdmp001",
      "metadata": {
        "description": "Project name"
      }
    },
    "objectId": {
      "type": "string",
      "metadata": {
        "description": "ObjectID of managed app"
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "TenantID of current subscription"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "standard",
      "metadata": {
        "description": "Specifies whether the key vault is a standard vault or a premium vault."
      },
      "allowedValues": [
        "standard",
        "premium"
      ]
    },
    "secretName": {
      "type": "string",
      "defaultValue": "sec01",
      "metadata": {
        "description": "Specifies the name of the secret that you want to create."
      }
    },
    "secretValue": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Specifies the value of the secret that you want to create."
      }
    }
  },
  "functions": [],
  "variables": {
    "vLocation": "[parameters('location')]",
    "vProjectName": "[parameters('projectName')]",
    "vObjectId": "[parameters('objectId')]",
    "vTenantId": "[parameters('tenantId')]",
    "vSKUName": "[parameters('skuName')]",
    "vSecretName": "[parameters('secretName')]",
    "vSecretValue": "[parameters('secretValue')]",
    "vKeyVaultName": "[format('{0}kv001', variables('vProjectName'))]",
    "vVNetBlueName": "vnetBlue",
    "vPrivateDnsZoneName": "[format('{0}-pdns.com', variables('vProjectName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "create-key-vault",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('vLocation')]"
          },
          "keyVaultName": {
            "value": "[variables('vKeyVaultName')]"
          },
          "enabledForDeployment": {
            "value": true
          },
          "enabledForDiskEncryption": {
            "value": true
          },
          "enabledForTemplateDeployment": {
            "value": true
          },
          "objectId": {
            "value": "[variables('vObjectId')]"
          },
          "tenantId": {
            "value": "[variables('vTenantId')]"
          },
          "keysPermissions": {
            "value": "[array('all')]"
          },
          "secretsPermissions": {
            "value": "[array('all')]"
          },
          "skuName": {
            "value": "[variables('vSKUName')]"
          },
          "secretName": {
            "value": "[variables('vSecretName')]"
          },
          "secretValue": {
            "value": "[variables('vSecretValue')]"
          },
          "vnetName": {
            "value": "[variables('vVNetBlueName')]"
          },
          "subnetName": {
            "value": "subnet1"
          },
          "privateDnsZoneName": {
            "value": "[variables('vPrivateDnsZoneName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.3.255.40792",
              "templateHash": "17463849148974998681"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location of the resources"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the key vault."
              }
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
              },
              "allowedValues": [
                true,
                false
              ]
            },
            "enabledForDiskEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
              },
              "allowedValues": [
                true,
                false
              ]
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              },
              "allowedValues": [
                true,
                false
              ]
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "Specifies the Azure Entra ID tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
              }
            },
            "objectId": {
              "type": "string",
              "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Entra ID tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            },
            "keysPermissions": {
              "type": "array",
              "defaultValue": [
                "list"
              ],
              "metadata": {
                "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
              }
            },
            "secretsPermissions": {
              "type": "array",
              "defaultValue": [
                "list"
              ],
              "metadata": {
                "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
              },
              "allowedValues": [
                "standard",
                "premium"
              ]
            },
            "secretName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the secret that you want to create."
              }
            },
            "secretValue": {
              "type": "secureString",
              "metadata": {
                "description": "Specifies the value of the secret that you want to create."
              }
            },
            "privateDnsZoneName": {
              "type": "string",
              "defaultValue": "consoto.com",
              "metadata": {
                "description": "Private DNS Zone name"
              }
            },
            "vnetName": {
              "type": "string",
              "defaultValue": "vNet",
              "metadata": {
                "description": "VNet name"
              }
            },
            "subnetName": {
              "type": "string",
              "defaultValue": "subnet",
              "metadata": {
                "description": "Subnet name of the VNet"
              }
            }
          },
          "functions": [],
          "variables": {
            "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
            "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]",
            "privateEndpointName_var": "[format('{0}-pe', parameters('keyVaultName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2019-09-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enablePurgeProtection": true,
                "enableSoftDelete": true,
                "enableRbacAuthorization": false,
                "createMode": "default",
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": [
                  {
                    "objectId": "[parameters('objectId')]",
                    "tenantId": "[parameters('tenantId')]",
                    "permissions": {
                      "keys": "[parameters('keysPermissions')]",
                      "secrets": "[parameters('secretsPermissions')]"
                    }
                  }
                ],
                "sku": {
                  "name": "[parameters('skuName')]",
                  "family": "A"
                },
                "networkAcls": {
                  "defaultAction": "Allow",
                  "bypass": "AzureServices"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "properties": {
                "value": "[parameters('secretValue')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-05-01",
              "name": "[variables('privateEndpointName_var')]",
              "location": "[parameters('location')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpointName_var')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                      "groupIds": [
                        "vault"
                      ]
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[variables('subnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-05-01",
              "name": "[format('{0}/aRecord', variables('privateEndpointName_var'))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-aRecord', variables('privateEndpointName_var'))]",
                    "properties": {
                      "privateDnsZoneId": "[variables('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName_var'))]"
              ]
            }
          ]
        }
      }
    }
  ]
}